{"version":3,"file":"static/js/974.f11b6648.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/ContactsPage.styled.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.items; // Всі контакти зі стейта Store\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// Сортування контактів за алфавітом\nexport const selectSortedContacts = state => {\n  const sortedContacts = [...state.contacts.items].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n  return sortedContacts;\n};\n\n// Фільтрація відсортованих контактів за значенням фільтра\nexport const selectFilteredContacts = createSelector(\n  [selectSortedContacts, selectFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n\n// Фільтрація контактів за значенням фільтра\n// export const selectFilteredContacts = createSelector(\n//   [selectItems, selectFilter],\n//   (contacts, filter) =>\n//     contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     )\n// );\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 25px;\n  flex-direction: column;\n  padding: 30px;\n\n  border: 1px solid #62ada0;\n  border-radius: 6px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n`;\n\nexport const FormInput = styled.input`\n  width: 300px;\n  font-size: 14px;\n  padding: 4px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 30px;\n\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const FormBtn = styled.button`\n  cursor: pointer;\n\n  display: flex;\n  gap: 8px;\n  justify-content: center;\n  align-items: center;\n\n  margin: 0 auto;\n  margin-top: 6px;\n\n  width: 100%;\n  max-width: 140px;\n  height: 30px;\n  padding: 2px 5px;\n\n  color: #fff;\n  background-color: #62ada0;\n  font-size: 14px;\n  font-weight: 700;\n\n  border: none;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.24) 10px 10px 5px 0px;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #010101;\n    background-color: #c8e9e3;\n    box-shadow: rgb(255, 255, 255) -2px -2px 5px,\n      rgba(0, 0, 0, 0.24) 2px 2px 5px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectItems } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { toast } from 'react-toastify';\nimport { HiOutlineUserAdd } from 'react-icons/hi';\nimport { Form, FormLabel, FormInput, FormBtn } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch(); // Хук для відправлення action\n  const contacts = useSelector(selectItems); // Отримуємо всі контакти зі стейта Store\n\n  // Відповідає за оновлення стану (контрольований інпут)\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Викликається під час відправлення форми\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const isAdded = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isAdded) {\n      return toast.error(`${name} is already in contacts.`);\n    }\n\n    const newContact = { name: name, number: number }; // Cтворення нового контакту\n    // Відправлення action addContact\n    dispatch(addContact(newContact));\n    resetForm(); // Очистка форми\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name:\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </FormLabel>\n\n      <FormLabel>\n        Number:\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </FormLabel>\n\n      <FormBtn type=\"submit\">\n        <HiOutlineUserAdd />\n        Add contact\n      </FormBtn>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ModalBackdrop = styled.div`\n  // z-index: 999;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  min-height: 180px;\n  max-width: 320px;\n  width: 100%;\n  padding: 12px;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { ModalBackdrop, ModalContent } from './Modal.styled';\n\n// Портал - DOM-вузол, в який буде рендеритися модальне вікно\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children, onClose }) => {\n  // Закриття модалки по ESC\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  // Закриття модалки по кліку на backdrop\n  // target - на чому клікнули\n  // currentTarget - на чому спрацював обробник подій\n  const handleBackdropClick = event => {\n    if (event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalContent>{children}</ModalContent>\n    </ModalBackdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  max-width: 100%;\n  width: 720px;\n\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  background-color: #f4efef;\n  padding: 2px 16px;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.01);\n  }\n`;\n\nexport const Span = styled.span`\n  display: flex;\n  gap: 4px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const WrapBtn = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Btn = styled.button`\n  cursor: pointer;\n\n  display: flex;\n  gap: 4px;\n  justify-content: center;\n  align-items: center;\n\n  width: 75px;\n  height: 26px;\n  padding: 2px 8px;\n\n  color: #fff;\n  background-color: #62ada0;\n  font-size: 14px;\n  font-weight: 500;\n\n  border: none;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.24) 5px 5px 5px 0px;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #010101;\n    background-color: #c8e9e3;\n    box-shadow: rgb(255, 255, 255) -2px -2px 5px,\n      rgba(0, 0, 0, 0.24) 2px 2px 5px;\n  }\n`;\n\n// Стилі модального вікна\nexport const ModalTitle = styled.h2`\n  text-align: center;\n  padding-bottom: 20px;\n`;\n\nexport const ModalForm = styled.form`\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n`;\n\nexport const ModalInput = styled.input`\n  width: 225px;\n  font-size: 14px;\n  padding: 4px;\n`;\n\nexport const ModalLabel = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const WrapModalBtn = styled.div`\n  margin-top: 6px;\n  display: flex;\n  gap: 16px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalBtn = styled.button`\n  cursor: pointer;\n\n  width: 80px;\n  height: 30px;\n  padding: 2px 5px;\n\n  color: #fff;\n  background-color: #62ada0;\n  font-size: 14px;\n  font-weight: 700;\n\n  border: none;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.24) 10px 10px 5px 0px;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #010101;\n    background-color: #c8e9e3;\n    box-shadow: rgb(255, 255, 255) -2px -2px 5px,\n      rgba(0, 0, 0, 0.24) 2px 2px 5px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport {\n  deleteContact,\n  updateContact,\n} from '../../redux/contacts/contactsOperations';\nimport Modal from '../Modal';\nimport { FaUser, FaPhone } from 'react-icons/fa';\nimport { AiFillEdit, AiFillDelete } from 'react-icons/ai';\nimport {\n  ContactsList,\n  ContactItem,\n  Span,\n  WrapBtn,\n  Btn,\n  ModalTitle,\n  ModalForm,\n  ModalLabel,\n  ModalInput,\n  WrapModalBtn,\n  ModalBtn,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  // Записуємо в стейт контакт (subName, subNumber, subId) для редагування\n  const [subName, setSubName] = useState('');\n  const [subNumber, setSubNumber] = useState('');\n  const [subId, setSubId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  // Відкрити модалку з контактом для редагування\n  const showModal = (name, number, id) => {\n    setSubNumber(number);\n    setSubName(name);\n    setSubId(id);\n    setIsModalOpen(true);\n  };\n\n  // Відправити редагований контакт на бекенд і закрити модалку\n  const handleSave = () => {\n    setIsModalOpen(false);\n    dispatch(updateContact({ id: subId, name: subName, number: subNumber }));\n  };\n\n  // Закрити модалку\n  const handleCancel = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <ContactsList>\n        {filteredContacts.map(({ id, name, number }) => (\n          <ContactItem key={id}>\n            <Span>\n              <FaUser color=\"#c8e9e3\" /> {name}:\n            </Span>\n            <Span>\n              <FaPhone color=\"#c8e9e3\" /> {number}\n            </Span>\n            <WrapBtn>\n              <Btn type=\"button\" onClick={() => showModal(name, number, id)}>\n                <AiFillEdit />\n                Edit\n              </Btn>\n              <Btn type=\"button\" onClick={() => handleDeleteContact(id)}>\n                <AiFillDelete />\n                Delete\n              </Btn>\n            </WrapBtn>\n          </ContactItem>\n        ))}\n\n        {!filteredContacts?.length && <div>No contacts found.</div>}\n      </ContactsList>\n\n      {/* Модальне вікно для редагування контакту */}\n      {isModalOpen && (\n        <Modal onClose={handleCancel}>\n          <ModalTitle>Edit this contact</ModalTitle>\n          <ModalForm>\n            <ModalLabel>\n              Name:\n              <ModalInput\n                type=\"text\"\n                name=\"name\"\n                value={subName}\n                onChange={e => {\n                  setSubName(e.target.value);\n                }}\n              />\n            </ModalLabel>\n            <ModalLabel>\n              Number:\n              <ModalInput\n                type=\"tel\"\n                name=\"number\"\n                value={subNumber}\n                onChange={e => {\n                  setSubNumber(e.target.value);\n                }}\n              />\n            </ModalLabel>\n            <WrapModalBtn>\n              <ModalBtn type=\"button\" onClick={handleSave}>\n                Save\n              </ModalBtn>\n              <ModalBtn type=\"button\" onClick={handleCancel}>\n                Cancel\n              </ModalBtn>\n            </WrapModalBtn>\n          </ModalForm>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterBlock = styled.div``;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  padding: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { FilterBlock, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = evt => {\n    const valueFilter = evt.currentTarget.value.trim();\n    dispatch(setFilter(valueFilter));\n  };\n\n  return (\n    <FilterBlock>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={filter}\n          onChange={handleChange}\n        />\n      </FilterLabel>\n    </FilterBlock>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  font-size: 16px;\n`;\n\nexport const Title = styled.h1`\n  margin: 30px 0 20px;\n`;\n\nexport const Subtitle = styled.h2`\n  margin: 30px 0 20px;\n`;\n\nexport const AmountContacts = styled.div`\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const ContactsNum = styled.span`\n  padding: 2px 8px;\n  background-color: #f4efef;\n`;\n\nexport const Message = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  padding: 40px 60px;\n  background-color: #f4efef;\n`;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport {\n  selectItems,\n  selectIsLoading,\n  selectError,\n} from '../../redux/contacts/selectors';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  Container,\n  Title,\n  Subtitle,\n  AmountContacts,\n  ContactsNum,\n  Message,\n} from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectItems); // Отримуємо всі контакти зі стейта Store\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>PhoneBook</Title>\n      <ContactForm />\n\n      <Subtitle>Contacts</Subtitle>\n      <AmountContacts>\n        All contacts in the phonebook:{' '}\n        <ContactsNum>{contacts.length}</ContactsNum>\n      </AmountContacts>\n\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <Message>Contact list is empty</Message>\n      )}\n\n      {isLoading && !error && <b>Request in progress...</b>}\n      {error && error}\n\n      <ToastContainer autoClose={2000} position=\"top-center\" theme=\"colored\" />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectItems","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","sort","a","b","name","localeCompare","contact","toLowerCase","includes","Form","styled","FormInput","FormLabel","FormBtn","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","evt","currentTarget","value","resetForm","onSubmit","preventDefault","find","toast","newContact","addContact","type","pattern","title","required","onChange","ModalBackdrop","ModalContent","modalRoot","document","querySelector","children","onClose","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","onClick","target","ContactsList","ContactItem","Span","WrapBtn","Btn","ModalTitle","ModalForm","ModalInput","ModalLabel","WrapModalBtn","ModalBtn","subName","setSubName","subNumber","setSubNumber","subId","setSubId","isModalOpen","setIsModalOpen","filteredContacts","handleCancel","map","id","color","showModal","contactId","deleteContact","length","e","updateContact","FilterBlock","FilterLabel","FilterInput","placeholder","valueFilter","trim","setFilter","Container","Title","Subtitle","AmountContacts","ContactsNum","Message","fetchContacts","autoClose","position","theme"],"sourceRoot":""}